[
  {
    "topic": "HTML",
    "questions": [
      {
    "question": "Понимание структуры базовой разметки страницы.",
    "answer": "Понимание структуры базовой разметки страницы включает знание о следующих элементах:\n\n    Тег <html>: Это корневой элемент, определяющий начало и конец HTML-документа.\n    Тег <head>: Внутри этого элемента содержатся метаданные и информация о документе, такие как заголовок страницы, подключение внешних стилей CSS, подключение скриптов и другие метаинформационные элементы.\n    Тег <body>: Он содержит основное содержимое веб-страницы, которое будет отображаться в браузере, такие как текст, изображения, таблицы, формы и другие элементы.\n    Другие элементы: Внутри <body> вы можете использовать различные HTML-теги для создания структуры и организации контента, такие как <header>, <nav>, <main>, <section>, <article>, <footer> и другие, в зависимости от семантической разметки и логической структуры вашей страницы."
      },
      {
        "question": "Понимание тегов, аттрибутов и значений;",
        "answer": "Понимание тегов, атрибутов и значений является основой разметки в HTML. Вот краткое описание каждого из этих понятий:\n\n    Теги: Теги используются для обозначения элементов в HTML. Они заключаются в угловые скобки < > и могут иметь открывающую и закрывающую части, например: <tag></tag>. Некоторые теги могут быть самозакрывающимися, например: <tag />. Теги определяют типы и структуру содержимого на веб-странице, например: <p> для абзацев, <img> для изображений, <a> для ссылок и т.д.\n\n    Атрибуты: Атрибуты предоставляют дополнительную информацию о тегах и используются для управления и настройки элементов. Атрибуты указываются внутри открывающего тега и имеют имя и значение, разделенные знаком равенства. Например: <tag attribute=\"value\">. Атрибуты могут влиять на внешний вид, поведение и свойства элементов, например: href для ссылок, src для изображений, class для задания класса элемента и т.д.\n\n    Значения: Значения атрибутов определяют специфические свойства или настройки элементов. Значения могут быть текстовыми, числовыми, булевыми или представлять другие типы данных, в зависимости от атрибута. Например, значение href для ссылки может быть URL-адресом, значение src для изображения - путем к изображению на сервере."
      },
      {
        "question": "Типы блоков и основные тэги;",
        "answer": "Блочные элементы: Такие элементы, как <div>, <p>, <h1>-<h6>, <ul>, <ol>, <li>, <header>, <footer>, <nav> и другие, считаются блочными элементами. Они занимают всю доступную ширину и начинаются с новой строки. \n\n Инлайн-элементы: Такие элементы, как <span>, <a>, <img>, <strong>, <em> и другие, считаются инлайн-элементами. Они занимают только необходимое пространство и не начинаются с новой строки."
      },
      {
        "question": "Назначение тегов html, head, body;",
        "answer": "    <html>: Этот тег является корневым элементом HTML-документа и определяет начало и конец документа. Все содержимое веб-страницы находится между открывающим и закрывающим тегами <html>. Он также используется для указания языка, на котором написан документ, с помощью атрибута lang.\n\n    <head>: Тег <head> содержит метаинформацию о документе, такую как заголовок страницы, подключение стилей CSS, подключение скриптов JavaScript, описание страницы для поисковых систем (с помощью метатегов), ссылки на внешние ресурсы и другие метаданные. Он не отображается непосредственно в окне браузера.\n\n    <body>: Этот тег определяет тело документа и содержит основное видимое содержимое веб-страницы, такое как текст, изображения, ссылки, таблицы и другие элементы. Все, что находится между открывающим и закрывающим тегами <body>, отображается в окне браузера."
      },
      {
        "question": "Три основных варианта добавление скриптов и стилей на страницу;",
        "answer": "    Встроенные (Inline): В этом способе код скрипта или стиля напрямую встраивается в HTML-документ с помощью соответствующих тегов. Например, для встраивания JavaScript используется тег <script>, а для стилей - тег <style>. Этот способ удобен для небольших фрагментов кода, но может быть неудобным для больших скриптов или стилей.\n\n    Внутренние (Internal): При использовании внутреннего способа код скрипта или стиля размещается непосредственно внутри HTML-документа внутри тегов <script> или <style>, расположенных внутри раздела <head> или <body>. Этот способ позволяет разместить более крупные фрагменты кода, сохраняя их в отдельном разделе документа.\n\n    Внешние (External): В этом способе скрипты и стили хранятся в отдельных внешних файлов, которые затем подключаются к HTML-документу с помощью тегов <script> и <link> соответственно. Внешние файлы обычно содержат весь код скрипта или стиля и могут быть повторно использованы на разных страницах. Этот способ обеспечивает лучшую отдельность кода и улучшает поддерживаемость и повторное использование."
      },
      {
        "question": "Основные meta-тэги + viewport",
        "answer": "Основные meta-теги используются для указания дополнительной информации о веб-странице. Meta-тег <meta charset> задает кодировку символов страницы. Meta-тег <meta name=\"viewport\"> определяет параметры просмотра страницы на мобильных устройствах."
      },
      {
        "question": "Адаптивная загрузка изображений: Picture, srcset",
        "answer": "Адаптивная загрузка изображений позволяет оптимизировать загрузку изображений на веб-странице в зависимости от размеров экрана устройства пользователя. Для этого используются атрибуты srcset и элемент <picture>. Атрибут srcset позволяет указать несколько вариантов изображений с разными разрешениями или размерами. Браузер выбирает наиболее подходящее изображение для текущего экрана. Элемент <picture> позволяет указать несколько источников изображений и задать разные параметры отображения для разных экранов или условий."
      },
      {
        "question": "Опыт работы с изображениеми. Понимание различий растра и вектора. Знание популярных форматов и их различие. Оптимизация изображений\n",
        "answer": "Опыт работы с изображениями веб-разработчика включает понимание различий между растровыми и векторными изображениями. Растровые изображения представлены сеткой пикселей и обычно используются для фотографий или сложных графических элементов. Векторные изображения основаны на математических формулах и состоят из геометрических фигур, что позволяет им масштабироваться без потери качества.\n\nПонимание различий между форматами изображений, такими как JPEG, PNG и GIF, важно для выбора наиболее подходящего формата в зависимости от конкретного случая. JPEG обычно используется для фотографий с высокой детализацией, PNG подходит для изображений с прозрачностью или без потерь, а GIF обычно применяется для анимированных изображений или графики с ограниченной палитрой цветов.\n\nОптимизация изображений включает уменьшение размера файлов, чтобы ускорить загрузку страницы. Это может включать сжатие изображений без значительной потери качества, использование атрибута srcset для предоставления разных вариантов изображений в зависимости от разрешения экрана, а также использование современных форматов изображений, таких как WebP, которые обеспечивают более эффективное сжатие."
      },
      {
        "question": "Порядок исполнения кода и html на странице, deferred/async;",
        "answer": "Порядок исполнения кода и HTML на странице:\n\n    Парсинг и выполнение HTML: Браузер постепенно парсит HTML-код сверху вниз и создает DOM-дерево, которое представляет структуру страницы.\n    Загрузка и выполнение внешних ресурсов: Внешние ресурсы, такие как стили CSS, скрипты JavaScript, изображения и другие медиафайлы, загружаются параллельно с парсингом HTML.\n    Выполнение JavaScript: Когда браузер встречает тег <script> или внешний скрипт, он останавливает парсинг HTML и начинает загрузку и выполнение JavaScript-кода.     Атрибуты defer и async:\n        defer: Атрибут defer указывает браузеру, что скрипт должен быть выполнен после того, как весь HTML будет полностью загружен, но до события DOMContentLoaded. Скрипты с атрибутом defer выполняются последовательно в порядке их появления в документе.\n        async: Атрибут async указывает браузеру, что скрипт независим от загрузки и парсинга HTML и может быть выполнен асинхронно. Скрипты с атрибутом async выполняются параллельно с загрузкой и могут быть выполнены в любом порядке.\n\nТаким образом, при использовании атрибута defer, скрипты будут выполнены в порядке их появления в HTML после загрузки страницы, но до события DOMContentLoaded. При использовании атрибута async, скрипты будут выполнены асинхронно и могут быть выполнены в любом порядке во время загрузки страницы."
      },
      {
        "question": "Prefetch, Preload, Preconnect и т.п., примеры использования",
        "answer": "Prefetch, Preload и Preconnect - это механизмы оптимизации загрузки ресурсов на веб-странице. Вот их краткое описание:\n\n    Prefetch: Prefetch используется для предварительной загрузки ресурсов, которые будут запрошены позднее на странице. Например, вы можете использовать prefetch для загрузки изображений, скриптов или стилей, которые будут использоваться на следующих страницах или после определенных событий. Это помогает ускорить загрузку ресурсов, так как они уже будут в браузерном кэше, когда они будут запрошены.\n\n    Preload: Preload используется для приоритетной загрузки критически важных ресурсов. Вы можете указать ресурсы, которые должны быть загружены вместе с HTML-страницей или до начала ее загрузки. Например, вы можете использовать preload для загрузки основных стилей, шрифтов или скриптов, необходимых для отображения содержимого страницы.\n\n    Preconnect: Preconnect позволяет браузеру установить соединение с сервером, прежде чем он будет фактически запрошен. Это полезно, когда вы знаете, что страница будет запрашивать ресурсы с другого домена или поддомена. Preconnect помогает установить соединение заранее, чтобы уменьшить задержку при последующих запросах."
      },
      {
        "question": "Доступность интерфейса, a11y",
        "answer": "Доступность интерфейса, также известная как a11y (сокращение от accessibility), относится к созданию веб-страниц и приложений, которые максимально доступны и понятны для всех пользователей, включая людей с ограниченными возможностями. Вот краткое описание:\n\n    Доступность интерфейса означает, что веб-страницы и приложения должны быть разработаны таким образом, чтобы люди с разными видами ограничений, такими как зрение, слух, моторика или когнитивные способности, могли ими пользоваться без препятствий.\n\n    Для достижения доступности интерфейса используются различные техники и методы, включая правильное использование семантической разметки HTML, доступную и понятную структуру контента, использование текстовых альтернатив для медиа-элементов, управление фокусом и клавиатурной навигацией, а также обеспечение достаточной контрастности цветов.\n\n    Доступность интерфейса также включает учет различных ассистивных технологий, таких как считыватели экрана, устройства управления, вспомогательные технологии для слабовидящих и другие инструменты, которые помогают пользователям с ограниченными возможностями взаимодействовать с веб-содержимым.\n\nОбеспечение доступности интерфейса является важным аспектом разработки веб-страниц и приложений, поскольку это позволяет создавать инклюзивное и равноправное онлайн-пространство для всех пользователей."
      },
      {
        "question": "Особенности SEO-разметки, семантическая разметка",
        "answer": "Особенности SEO-разметки и семантической разметки веб-страниц связаны с оптимизацией контента для поисковых систем, а также созданием понятной и логической структуры страницы для пользователя. Вот краткое описание:\n\n    SEO-разметка: SEO (Search Engine Optimization) - это процесс оптимизации веб-страниц для улучшения их видимости и ранжирования в результатах поисковых систем. Особенности SEO-разметки включают использование метатегов (например, заголовков страницы, описаний и ключевых слов), оптимизацию заголовков и подзаголовков, использование уникальных и информативных URL-адресов, а также оптимизацию изображений и ссылок.\n\n    Семантическая разметка: Семантическая разметка относится к использованию HTML-тегов согласно их смыслу и назначению, чтобы создать понятную структуру контента на веб-странице. Особенности семантической разметки включают использование соответствующих тегов (например, <header>, <nav>, <article>, <section>, <footer>) для обозначения различных частей страницы, использование тегов <h1>-<h6> для заголовков разных уровней, использование списков (<ul>, <ol>, <dl>) для организации информации и другие семантические элементы.\n\n    Преимущества SEO-разметки и семантической разметки включают лучшую видимость в поисковых системах, повышение удобства использования для пользователей, лучшую доступность для ассистивных технологий, а также улучшение общей структуры и понимания контента страницы.\n\nИспользование правильной SEO-разметки и семантической разметки помогает повысить качество веб-страницы, сделать ее более информативной и легкодоступной для пользователей и поисковых систем, а также улучшить ее позиции в поисковой выдаче."
      }
    ]
  },
  {
    "topic": "CSS",
    "questions": [
      {
        "question": "Стили управления BoxModel; Особенности работы Box-sizing;\n",
        "answer": "Стили управления Box Model и особенности работы Box-sizing влияют на то, как элементы на веб-странице занимают пространство и взаимодействуют друг с другом.\n\nBox Model - это модель, которая определяет, каким образом размеры элементов учитываются при отображении на странице. Она состоит из контента элемента, границы (border), внутренних отступов (padding) и внешних отступов (margin).\n\nСтили управления Box Model позволяют контролировать размеры и расположение элементов, включая ширину, высоту, границы и отступы. Некоторые из стилей управления Box Model включают свойства width, height, border, padding и margin.\n\nBox-sizing - это свойство CSS, которое определяет, каким образом браузер должен учитывать размеры элемента при расчете его полной ширины и высоты. Значение по умолчанию для свойства box-sizing - content-box, что означает, что размеры элемента включают только его контент, без учета границы и внутренних отступов.\n\nОднако, при использовании box-sizing: border-box, размеры элемента будут включать его контент, границу и внутренние отступы. Это может быть полезным при создании адаптивных макетов или управлении размерами элементов более предсказуемым образом.\n\nВ итоге, стили управления Box Model и свойство Box-sizing позволяют лучше контролировать размеры и расположение элементов на странице, а также обеспечивают более предсказуемое поведение при работе с размерами элементов."
      },
      {
        "question": "Типы отображения элементов на странице; Знание Flexbox;  \n",
        "answer": "Типы отображения элементов на странице определяют, как элементы будут располагаться и взаимодействовать друг с другом. Некоторые из основных типов отображения включают:\n\n    Block (Блочный) - элементы блочного типа занимают всю доступную ширину горизонтально и занимают отдельные строки вертикально. Примеры элементов блочного типа включают <div>, <p>, <h1>-<h6> и другие.\n\n    Inline (Встроенный) - элементы встроенного типа не разрывают строки и занимают только необходимое пространство по горизонтали. Примеры элементов встроенного типа включают <span>, <a>, <strong> и другие.\n\n    Inline-Block (Встроенный блок) - элементы встроенного блока сочетают свойства блочного и встроенного отображения. Они занимают только необходимое горизонтальное пространство, но могут иметь ширину и высоту, а также быть выровненными по вертикали. Примеры элементов встроенного блока включают <img>, <button>, <input> и другие.\n\nЗнание Flexbox - это навык работы с гибким контейнером (flex container) и его элементами (flex items) с помощью модели Flexbox. Flexbox предоставляет мощные возможности для создания гибких и адаптивных макетов. Он позволяет управлять распределением и выравниванием элементов внутри контейнера по горизонтали и вертикали, а также управлять изменением размеров элементов и их порядком отображения. Знание Flexbox позволяет легко создавать сложные макеты, адаптивные дизайны и управлять расположением элементов на странице.\n\nВ итоге, понимание типов отображения элементов и умение работать с Flexbox позволяют лучше контролировать макет и расположение элементов на странице, обеспечивая гибкость и адаптивность веб-дизайна."
      },
      {
        "question": "Различные способы центрирования элементов по горизонтали и вертикали\n",
        "answer": "Существует несколько способов центрирования элементов по горизонтали и вертикали. Вот некоторые из них:\n\n    Центрирование по горизонтали:\n        text-align: center;: Применение этого свойства к родительскому элементу позволяет центрировать текст и встроенные элементы горизонтально.\n        margin: 0 auto;: Установка автоматичесных отступов слева и справа позволяет центрировать блочный элемент горизонтально внутри его родительского контейнера.\n        Flexbox: Использование свойства justify-content: center; для контейнера Flexbox центрирует его дочерние элементы по горизонтали.\n\n    Центрирование по вертикали:\n        line-height: <height>;: Установка высоты строки равной высоте родительского контейнера позволяет центрировать однострочный текст вертикально.\n        display: flex; align-items: center;: Применение этих свойств к родительскому элементу с помощью Flexbox позволяет центрировать его дочерние элементы по вертикали.\n        Использование позиционирования: Комбинация свойств position: relative; top: 50%; transform: translateY(-50%); позволяет центрировать элемент по вертикали, выравнивая его по середине относительно родительского контейнера.\n\n    Центрирование по горизонтали и вертикали:\n        Flexbox: Использование свойств justify-content: center; и align-items: center; для контейнера Flexbox центрирует его дочерние элементы по горизонтали и вертикали одновременно.\n        Использование позиционирования: Комбинация свойств position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); позволяет центрировать элемент по горизонтали и вертикали, выравнивая его по середине относительно родительского контейнера.\n\nВажно отметить, что каждый из этих способов имеет свои особенности и может быть наиболее подходящим в зависимости от конкретных требований и контекста верстки."
      },
      {
        "question": "Основные виды и способы описания селекторов, композиция селекторов, каскады, специфичность;\n",
        "answer": "Основные виды и способы описания селекторов в CSS включают следующие:\n\n    Элементные селекторы: Селекторы, которые выбирают элементы по их тегу. Например, p выбирает все абзацы на странице.\n\n    Идентификаторные селекторы: Селекторы, которые выбирают элементы по их уникальному идентификатору. Они начинаются с символа #. Например, #myElement выбирает элемент с идентификатором \"myElement\".\n\n    Классовые селекторы: Селекторы, которые выбирают элементы по их классу. Они начинаются с символа .. Например, .myClass выбирает элементы с классом \"myClass\".\n\n    Псевдоклассы: Селекторы, которые выбирают элементы на основе их состояния или позиции в документе. Они начинаются с двоеточия :. Например, :hover выбирает элемент при наведении на него курсора.\n\n    Атрибутные селекторы: Селекторы, которые выбирают элементы на основе их атрибутов. Например, [type=\"text\"] выбирает все элементы с атрибутом type, равным \"text\".\n\nКомпозиция селекторов позволяет комбинировать несколько селекторов для более точного выбора элементов. Например, div p выбирает все абзацы, которые являются потомками элементов <div>.\n\nКаскады в CSS определяют, какие стили будут применяться к элементам, когда у них есть несколько правил, конфликтующих между собой. Каскады определяются на основе специфичности селекторов и порядка их объявления. Более специфичные селекторы имеют больший приоритет. Если у двух правил есть одинаковая специфичность, то правило, объявленное последним, будет иметь больший приоритет.\n\nСпецифичность селекторов определяется на основе комбинации типа селектора, классов, идентификаторов и псевдоклассов, используемых в селекторе. Чем больше элементов в селекторе и чем больше классов, идентификаторов и псевдоклассов, тем более специфичный он будет.\n\nПри разрешении конфликтов CSS правил и определении приоритета стилей, следует учитывать как каскады, так и специфичность селекторов, чтобы определить, какие стили будут применяться к элементам."
      },
      {
        "question": "Позиционирование элементов;\n",
        "answer": "Позиционирование элементов в CSS позволяет контролировать их расположение на странице. Вот несколько основных способов позиционирования элементов:\n\n    Статическое позиционирование (static): Это значение по умолчанию для позиционирования элементов. Элементы располагаются в порядке, определенном структурой документа.\n\n    Относительное позиционирование (relative): Элементы с относительным позиционированием могут быть сдвинуты относительно их исходного положения, используя свойства top, bottom, left и right. Остальные элементы остаются в потоке документа, исходное пространство элемента остается зарезервированным.\n\n    Абсолютное позиционирование (absolute): Элементы с абсолютным позиционированием смещаются относительно ближайшего родительского элемента с позиционированием, отличным от статического, или относительно самого окна браузера, если такого родительского элемента нет. Они не занимают места в потоке документа и могут перекрывать другие элементы.\n\n    Фиксированное позиционирование (fixed): Элементы с фиксированным позиционированием позиционируются относительно окна браузера и остаются на фиксированном месте даже при прокрутке страницы. Они также не занимают места в потоке документа и могут перекрывать другие элементы.\n\n    Позиционирование с помощью float (float): Свойство float позволяет элементам выравниваться по левому или правому краю родительского контейнера и обтекать другие элементы.\n\n    Гибкое позиционирование с помощью Flexbox и Grid: CSS-модули Flexbox и Grid предоставляют мощные инструменты для гибкого позиционирования элементов вдоль оси их контейнера. Они позволяют создавать сложные макеты с гибким распределением элементов.\n\nКаждый из этих методов позиционирования имеет свои особенности и подходит для различных сценариев. Выбор определенного метода зависит от требований макета и поведения элементов на странице."
      },
      {
        "question": "Псевдоклассы;\n",
        "answer": "Псевдоклассы в CSS позволяют выбирать и стилизовать элементы на основе их состояния или позиции в документе. Вот несколько распространенных псевдоклассов:\n\n    :hover: Применяется к элементу при наведении на него курсора мыши.\n\n    :active: Применяется к элементу во время его активации, например, при нажатии на кнопку мыши.\n\n    :focus: Применяется к элементу, который находится в фокусе, например, поле ввода, когда пользователь вводит данные.\n\n    :visited: Применяется к ссылке, которую пользователь уже посетил.\n\n    :first-child: Применяется к первому дочернему элементу внутри родительского элемента.\n\n    :last-child: Применяется к последнему дочернему элементу внутри родительского элемента.\n\n    :nth-child(n): Применяется к элементу, который является n-ным дочерним элементом внутри родительского элемента.\n\n    :nth-of-type(n): Применяется к элементу, который является n-ным элементом определенного типа внутри родительского элемента.\n\n    :not(selector): Исключает элементы, соответствующие определенному селектору.\n\n    :empty: Применяется к элементу, который не содержит дочерних элементов или текстового содержимого.\n\nЭто лишь некоторые из множества псевдоклассов, доступных в CSS. Они позволяют создавать более точное и гибкое стилизование элементов в зависимости от их состояния или положения в документе."
      },
      {
        "question": "Псевдоэлементы;\n",
        "answer": "Псевдоэлементы в CSS позволяют создавать и стилизовать виртуальные элементы, которые не существуют в исходном HTML-коде, но могут быть использованы для добавления декоративных или структурных элементов. Вот несколько распространенных псевдоэлементов:\n\n    ::before: Создает виртуальный элемент, который добавляется в начало выбранного элемента. Часто используется для добавления декоративных элементов или контента перед элементом.\n\n    ::after: Создает виртуальный элемент, который добавляется в конец выбранного элемента. Часто используется для добавления декоративных элементов или контента после элемента.\n\n    ::first-line: Применяется к первой строке текста внутри выбранного элемента. Позволяет стилизовать только первую строку текста, например, изменять ее цвет или выравнивание.\n\n    ::first-letter: Применяется к первой букве текста внутри выбранного элемента. Позволяет стилизовать только первую букву, например, изменять ее размер или добавлять декоративные элементы.\n\n    ::selection: Применяется к выделенному пользователем тексту на странице. Позволяет изменять внешний вид выделенного текста, например, цвет фона или цвет текста.\n\n    ::placeholder: Применяется к плейсхолдеру внутри текстового поля или текстовой области. Позволяет стилизовать текст плейсхолдера, например, изменять его цвет или шрифт.\n\n    ::marker: Применяется к маркеру элемента списка. Позволяет стилизовать маркеры, например, изменять их цвет или форму.\n\nЭто лишь некоторые из множества псевдоэлементов, доступных в CSS. Они позволяют создавать различные декоративные или структурные элементы, добавлять контент или изменять внешний вид определенных частей элементов."
      },
      {
        "question": "Понимание абсолютных и относительных единиц измерения, какие есть единицы измерения, как работают\n",
        "answer": "Ответ 3"
      },
      {
        "question": "Знание Grid-layout;\n",
        "answer": "Grid Layout - это CSS-модуль, который предоставляет мощные возможности для создания сеток на веб-страницах. Он позволяет разбивать содержимое страницы на ячейки с помощью сеточной структуры, состоящей из строк и столбцов.\n\nОсновные концепции и функции Grid Layout:\n\n    Родительский контейнер и дочерние элементы: Сетка создается путем определения родительского контейнера, который становится контейнером сетки, и дочерних элементов, которые являются элементами сетки.\n\n    Определение сетки: С помощью свойств grid-template-rows и grid-template-columns определяются строки и столбцы сетки. Можно указывать размеры строк и столбцов в пикселях, процентах или с помощью других единиц измерения.\n\n    Размещение элементов: С помощью свойства grid-row и grid-column можно задать, в каких строках и столбцах должен размещаться каждый дочерний элемент. Можно использовать числовые значения или ключевые слова, такие как span, для указания размера элемента.\n\n    Создание ячеек: С помощью свойства grid-gap или gap можно установить промежуток между ячейками сетки, чтобы создать отступы или разделители между элементами.\n\n    Гибкость и адаптивность: Grid Layout позволяет создавать адаптивные сетки, которые автоматически изменяются и перестраиваются в зависимости от доступного пространства. Можно использовать функции автозаполнения, медиа-запросы и другие методы для создания гибких и отзывчивых макетов.\n\n    Позиционирование и выравнивание: Grid Layout предоставляет мощные возможности для позиционирования и выравнивания элементов внутри сетки. Можно задавать выравнивание по горизонтали и вертикали, управлять размерами ячеек и контролировать перекрытие элементов.\n\nИспользование Grid Layout позволяет создавать сложные макеты и управлять расположением элементов на веб-странице. Он предоставляет более гибкие и мощные инструменты по сравнению с традиционными методами верстки на основе блочной модели и плавающих элементов."
      },
      {
        "question": "Варианты организации анимаций в css\n",
        "answer": "В CSS существуют несколько вариантов организации анимаций. Вот некоторые из них:\n\n    CSS Transitions (переходы): Этот метод позволяет задать анимацию для изменения свойств элемента во время перехода между двумя состояниями. Для этого используется свойство transition, где указываются свойства, которые должны изменяться и время, за которое должен происходить переход.\n\n    CSS Animations (анимации): В отличие от переходов, анимации позволяют создавать сложные и динамичные анимации, состоящие из нескольких шагов. Для создания анимаций используется правило @keyframes, где определяются состояния элемента в разных моментах времени.\n\n    CSS Transforms (трансформации): Этот метод позволяет применять трансформации к элементам, такие как перемещение, масштабирование, вращение и искажение. Трансформации могут быть анимированы с помощью переходов или анимаций.\n\n    JavaScript и CSS: Можно использовать JavaScript для управления анимациями CSS. Это дает большую гибкость и контроль над анимациями, позволяя программно управлять классами и свойствами элементов.\n\n    CSS библиотеки и фреймворки: Существуют различные CSS библиотеки и фреймворки, такие как Animate.css, GreenSock Animation Platform (GSAP), CSS3 Animation Cheat Sheet и другие, которые предлагают готовые анимации и упрощенный синтаксис для создания анимаций.\n\nВыбор конкретного варианта организации анимаций в CSS зависит от требуемых эффектов, сложности анимации и индивидуальных предпочтений разработчика."
      },
      {
        "question": "Базовые стили типографики, кастомные шрифты;\n",
        "answer": "Базовые стили типографики включают набор правил и свойств, которые используются для установки внешнего вида текста на веб-странице. Вот некоторые из них:\n\n    Шрифты: Устанавливаются семейство шрифтов (например, Arial, Helvetica, Times New Roman) и размер шрифта для различных элементов текста, таких как абзацы, заголовки, ссылки и другие.\n\n    Цвет текста: Задается цвет текста с использованием свойства color. Это позволяет выбрать желаемый цвет текста, который соответствует общему дизайну и контрасту на странице.\n\n    Размер и интерлиньяж: Свойства font-size и line-height устанавливают размер текста и интервал между строками соответственно. Это позволяет контролировать читабельность и визуальное восприятие текста.\n\n    Начертание и стиль: Можно задать начертание текста, такое как жирное (font-weight: bold) или курсивное (font-style: italic). Это добавляет разнообразие и акцентуирует внимание на определенных частях текста.\n\n    Выравнивание текста: Свойство text-align позволяет выравнивать текст по левому краю, правому краю, по центру или по ширине блока. Это влияет на общую композицию текста на странице.\n\nКастомные шрифты позволяют использовать нестандартные шрифты, отличные от шрифтов, установленных на компьютере пользователя. Для этого используется правило @font-face, которое определяет и загружает пользовательский шрифт на веб-страницу. С помощью этого правила можно указать путь к шрифтовому файлу и определить его начертания и стили (например, жирное, курсивное). После этого шрифт можно использовать в CSS правилах, указывая его имя в свойстве font-family.\n\nТаким образом, базовые стили типографики и кастомные шрифты помогают создать эстетически приятный и читаемый текст на веб-странице, поддерживая общую структуру и дизайн сайта."
      },
      {
        "question": "Медиа-запросы;\n",
        "answer": "Медиа-запросы (Media Queries) в CSS позволяют применять различные стили и макеты в зависимости от характеристик устройства или окна просмотра, на котором отображается веб-страница. Это позволяет создавать адаптивный дизайн, который отзывчиво реагирует на разные размеры экранов и устройств.\n\nМедиа-запросы могут быть использованы для установки стилей в зависимости от следующих параметров:\n\n    Ширина экрана: Медиа-запросы позволяют определить стили для разных ширин экрана. Например, можно задать другой макет для мобильных устройств с маленькими экранами и отличный от него для планшетов и настольных компьютеров.\n\n    Ориентация устройства: Медиа-запросы позволяют устанавливать стили в зависимости от ориентации экрана, например, горизонтальной или вертикальной. Это полезно для определения адаптивного поведения элементов при изменении ориентации устройства.\n\n    Плотность пикселей: Медиа-запросы могут использоваться для установки стилей на устройствах с различной плотностью пикселей, таких как ретиновые дисплеи. Это позволяет улучшить качество отображения изображений и текста на таких устройствах.\n\n    Другие характеристики устройства: Медиа-запросы также могут проверять другие параметры, такие как тип устройства (например, печатное устройство), разрешение экрана, поддержка определенных функций (например, touch-событий), языковые предпочтения и другие.\n\nМедиа-запросы могут быть заданы внутри CSS-файла с использованием ключевого слова @media и условных выражений, определяющих нужные характеристики."
      },
      {
        "question": "\"Популярные раскладки web-страниц:\n - С фиксированной шапкой или подвалом\n - С ограниченной высотой и шириной размерами экрана (mobile like)\n - С плавающими элементами (колонка навигации, прогрессбаром и тп)\"\n",
        "answer": "    Раскладка с фиксированной шапкой или подвалом: В данной раскладке шапка и/или подвал страницы имеют фиксированную высоту или положение. Это достигается путем задания фиксированной высоты или позиции для шапки и/или подвала с помощью CSS. Остальная часть страницы может иметь прокручиваемый контент, чтобы пользователь мог видеть весь доступный контент на странице, несмотря на фиксированную шапку или подвал.\n\n    Раскладка с ограниченной высотой и шириной размерами экрана (mobile-like): В этой раскладке страница ограничивается по высоте и ширине, чтобы лучше соответствовать мобильным устройствам. Это достигается путем задания максимальной ширины и высоты для основного контейнера страницы с помощью CSS. Таким образом, контент будет автоматически подстраиваться под размер экрана и обеспечивать более удобное отображение на мобильных устройствах.\n\n    Раскладка с плавающими элементами: В данной раскладке элементы страницы, такие как колонка навигации, прогресс-бар или боковая панель, плавают вокруг основного содержимого. Это достигается с помощью CSS-свойства float или flexbox, которые позволяют элементам выравниваться вокруг других элементов. Элементы могут быть выровнены по левому или правому краю, а их позиция может изменяться в зависимости от размера экрана или других факторов.\n\nВ каждом из этих случаев реализация может варьироваться в зависимости от конкретных требований дизайна и используемых технологий."
      },
      {
        "question": "Особенности кросс-браузерной верстки - привести несколько примеров проблем, какие глобальные варианты решений есть\n",
        "answer": "Особенности кросс-браузерной верстки могут включать различия в поддержке CSS-свойств, HTML-элементов, JavaScript-API и других веб-стандартов разными браузерами. Некоторые примеры проблем, с которыми можно столкнуться при кросс-браузерной верстке, включают:\n\n    Различия в отображении и расположении элементов: Разные браузеры могут интерпретировать CSS-свойства и значения по-разному, что может привести к различиям в отображении и позиционировании элементов на странице.\n\n    Неподдерживаемые CSS-свойства: Некоторые CSS-свойства могут не поддерживаться определенными браузерами или иметь различное поведение. Например, старые версии Internet Explorer могут не поддерживать некоторые свойства CSS3.\n\n    Различия в поддержке HTML5-элементов: Некоторые старые браузеры не поддерживают новые элементы HTML5, такие как <video>, <audio>, <canvas> и другие. Это может требовать использования альтернативных решений или полифиллов для поддержки функциональности в этих браузерах.\n\n    Различия в JavaScript-API: Разные браузеры могут иметь разные реализации JavaScript-API, что может привести к проблемам совместимости или неожиданному поведению веб-приложений.\n\nГлобальные варианты решений для обеспечения кросс-браузерной совместимости включают:\n\n    Использование нормализации стилей: Это позволяет установить единый базовый набор стилей для разных браузеров и минимизировать различия в отображении.\n\n    Проверка поддержки функциональности: Перед использованием новых HTML5-элементов, CSS-свойств или JavaScript-API рекомендуется проверить их поддержку в целевых браузерах и предусмотреть альтернативные решения для неподдерживаемых сценариев.\n\n    Использование полифиллов: Полифиллы - это код, который эмулирует функциональность, которая отсутствует в старых браузерах. Они могут быть использованы для поддержки новых стандартов и функций в старых браузерах.\n\n    Тестирование на разных браузерах: Регулярное тестирование и отладка вашего веб-приложения на различных браузерах помогут выявить и решить проблемы совместимости.\n\n    Следование лучшим практикам и рекомендациям: Соблюдение стандартов, использование семантической разметки, избегание устаревших или неподдерживаемых технологий помогут повысить кросс-браузерную совместимость вашего веб-приложения."
      },
      {
        "question": "Способы организации работы с CSS: CSS-модули, BEM, CSS in JS;\n",
        "answer": "Способы организации работы с CSS представляют различные подходы к структурированию и организации стилей в веб-проектах. Некоторые из них включают:\n\n    CSS-модули: CSS-модули предлагают локальную область видимости для стилей, позволяя изолировать стили компонентов от других частей проекта. Каждый модуль имеет свое уникальное пространство имен, что предотвращает конфликты между классами и стилями.\n\n    BEM (Block-Element-Modifier): BEM является методологией именования классов в CSS, предлагающей четкую и понятную структуру для стилей. Классы состоят из блоков, элементов и модификаторов, что облегчает чтение и понимание кода.\n\n    CSS in JS: CSS in JS представляет подход, в котором стили пишутся непосредственно в JavaScript-коде компонентов. Стили инкапсулируются в компоненте и могут быть динамически изменены на основе состояния компонента. Этот подход упрощает переиспользование стилей и облегчает сопровождение кода.\n\nКаждый из этих подходов имеет свои особенности и преимущества, и выбор зависит от конкретных потребностей проекта и предпочтений разработчика. Он может быть определен командными соглашениями, архитектурными решениями или инструментами, используемыми в проекте."
      },
      {
        "question": "Переменные;\n",
        "answer": "Переменные в CSS позволяют определить и использовать значения, которые могут быть повторно использованы в различных частях кода. Они представляют собой именованные контейнеры для хранения значений, таких как цвета, размеры, шрифты и другие свойства.\n\nОсобенности переменных в CSS:\n\n    Объявление переменных: Переменные объявляются с использованием ключевого слова var и начинаются с символа $ или --. Например, $color или --font-size.\n\n    Значения переменных: Переменные могут содержать любые допустимые значения CSS, включая цвета, числа, строки, размеры и другие свойства.\n\n    Переиспользование переменных: Значения переменных могут быть использованы в различных местах кода, что позволяет легко изменять и обновлять значения в одном месте.\n\n    Каскадность: Переменные в CSS наследуются от родительских элементов, поэтому значение переменной может быть установлено на уровне верхнего элемента и автоматически применяться ко всем дочерним элементам.\n\n    Динамические значения: Значения переменных могут быть изменены с помощью CSS-свойства var(), что позволяет создавать динамические и адаптивные стили.\n\nИспользование переменных в CSS помогает упростить стилизацию и обеспечить гибкость и переиспользование кода. Они позволяют быстро изменять значения свойств в одном месте, что упрощает поддержку и обновление стилей в проекте."
      },
      {
        "question": "Mixin'ы;\n",
        "answer": "Mixin'ы - это механизм, который позволяет объединять и переиспользовать стили и функциональность в CSS препроцессорах, таких как Sass или Less. Они позволяют создавать наборы стилей, которые могут быть включены в различные селекторы или классы.\n\nОсобенности mixin'ов включают:\n\n    Переиспользование стилей: Миксины позволяют определить набор стилей один раз и затем использовать их в разных частях кода, без необходимости дублирования стилей.\n\n    Параметры: Миксины могут принимать параметры, что делает их более гибкими и адаптируемыми к различным ситуациям. Параметры могут быть использованы для настройки стилей, например, для изменения цвета, размера или других свойств элементов.\n\n    Инклуды: Миксины могут быть включены (инклуды) в различные селекторы или классы, чтобы применить определенные стили к элементам. Это позволяет быстро применять наборы стилей ко множеству элементов.\n\n    Иерархия миксинов: Миксины могут включать другие миксины, образуя иерархию стилей. Это позволяет создавать более сложные иерархии стилей, где каждый уровень миксина добавляет определенные свойства или функциональность.\n\nИспользование mixin'ов упрощает и ускоряет процесс разработки, позволяет создавать модульные и гибкие стили, а также снижает дублирование кода. Они способствуют поддерживаемости и масштабируемости стилей в проекте."
      }
    ]
  }
]
